<?php

namespace hanneskod\readmetester\DependencyInjection;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class ProjectServiceContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMap = [
            'application' => 'getApplicationService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'Psr\\Container\\ContainerInterface' => true,
            'Symfony\\Component\\DependencyInjection\\ContainerInterface' => true,
            'hanneskod\\readmetester\\Attributes\\AppendCode' => true,
            'hanneskod\\readmetester\\Attributes\\Assert' => true,
            'hanneskod\\readmetester\\Attributes\\Example' => true,
            'hanneskod\\readmetester\\Attributes\\ExampleContext' => true,
            'hanneskod\\readmetester\\Attributes\\ExpectError' => true,
            'hanneskod\\readmetester\\Attributes\\ExpectOutput' => true,
            'hanneskod\\readmetester\\Attributes\\Ignore' => true,
            'hanneskod\\readmetester\\Attributes\\IgnoreError' => true,
            'hanneskod\\readmetester\\Attributes\\IgnoreOutput' => true,
            'hanneskod\\readmetester\\Attributes\\IgnoreUnmarkedExamples' => true,
            'hanneskod\\readmetester\\Attributes\\Import' => true,
            'hanneskod\\readmetester\\Attributes\\Isolate' => true,
            'hanneskod\\readmetester\\Attributes\\Name' => true,
            'hanneskod\\readmetester\\Attributes\\NamespaceName' => true,
            'hanneskod\\readmetester\\Attributes\\PrependCode' => true,
            'hanneskod\\readmetester\\Attributes\\StartInHtmlMode' => true,
            'hanneskod\\readmetester\\CliConsole' => true,
            'hanneskod\\readmetester\\Compiler\\CodeBlockImportingPass' => true,
            'hanneskod\\readmetester\\Compiler\\CompilerFactoryInterface' => true,
            'hanneskod\\readmetester\\Compiler\\FileInput' => true,
            'hanneskod\\readmetester\\Compiler\\MultipassCompiler' => true,
            'hanneskod\\readmetester\\Compiler\\StdinInput' => true,
            'hanneskod\\readmetester\\Compiler\\TransformationPass' => true,
            'hanneskod\\readmetester\\Compiler\\UniqueNamePass' => true,
            'hanneskod\\readmetester\\ExampleTester' => true,
            'hanneskod\\readmetester\\Example\\ArrayExampleStore' => true,
            'hanneskod\\readmetester\\Example\\CombinedExampleStore' => true,
            'hanneskod\\readmetester\\Example\\ExampleObj' => true,
            'hanneskod\\readmetester\\Example\\ExampleRegistry' => true,
            'hanneskod\\readmetester\\ExitStatusListener' => true,
            'hanneskod\\readmetester\\Expectation\\ErrorExpectation' => true,
            'hanneskod\\readmetester\\Expectation\\ExpectationEvaluator' => true,
            'hanneskod\\readmetester\\Expectation\\Failure' => true,
            'hanneskod\\readmetester\\Expectation\\OutputExpectation' => true,
            'hanneskod\\readmetester\\Expectation\\Success' => true,
            'hanneskod\\readmetester\\Formatter\\DefaultFormatter' => true,
            'hanneskod\\readmetester\\Formatter\\JsonFormatter' => true,
            'hanneskod\\readmetester\\Markdown\\Compiler' => true,
            'hanneskod\\readmetester\\Markdown\\CompilerFactory' => true,
            'hanneskod\\readmetester\\Markdown\\Definition' => true,
            'hanneskod\\readmetester\\Markdown\\Parser' => true,
            'hanneskod\\readmetester\\Markdown\\Template' => true,
            'hanneskod\\readmetester\\Markdown\\TemplateRenderer' => true,
            'hanneskod\\readmetester\\Runner\\ErrorOutcome' => true,
            'hanneskod\\readmetester\\Runner\\EvalRunner' => true,
            'hanneskod\\readmetester\\Runner\\OutputOutcome' => true,
            'hanneskod\\readmetester\\Runner\\ProcessRunner' => true,
            'hanneskod\\readmetester\\Runner\\SkippedOutcome' => true,
            'hanneskod\\readmetester\\Runner\\VoidOutcome' => true,
            'hanneskod\\readmetester\\Utils\\CodeBlock' => true,
            'hanneskod\\readmetester\\Utils\\Loader' => true,
            'hanneskod\\readmetester\\Utils\\NameObj' => true,
            'hanneskod\\readmetester\\Utils\\Regexp' => true,
        ];
    }

    /**
     * Gets the public 'application' shared autowired service.
     *
     * @return \Symfony\Component\Console\SingleCommandApplication
     */
    protected function getApplicationService()
    {
        $this->services['application'] = $instance = new \Symfony\Component\Console\SingleCommandApplication();

        $a = new \hanneskod\readmetester\CliConsole();

        $instance->setName('Readme-Tester');
        $instance->setVersion('dev');
        $instance->setCode($a);
        $a->configure($instance);

        return $instance;
    }
}
