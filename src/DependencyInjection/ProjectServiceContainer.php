<?php

namespace hanneskod\readmetester\DependencyInjection;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class ProjectServiceContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->methodMap = [
            'application' => 'getApplicationService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return [
            'Crell\\Tukio\\OrderedProviderInterface' => true,
            'Fig\\EventDispatcher\\AggregateProvider' => true,
            'Psr\\Container\\ContainerInterface' => true,
            'Psr\\EventDispatcher\\EventDispatcherInterface' => true,
            'Symfony\\Component\\DependencyInjection\\ContainerInterface' => true,
            'config_loader' => true,
            'default_config_repository' => true,
            'hanneskod\\readmetester\\Attributes\\AppendCode' => true,
            'hanneskod\\readmetester\\Attributes\\Assert' => true,
            'hanneskod\\readmetester\\Attributes\\Example' => true,
            'hanneskod\\readmetester\\Attributes\\ExampleContext' => true,
            'hanneskod\\readmetester\\Attributes\\ExpectError' => true,
            'hanneskod\\readmetester\\Attributes\\ExpectOutput' => true,
            'hanneskod\\readmetester\\Attributes\\Ignore' => true,
            'hanneskod\\readmetester\\Attributes\\IgnoreError' => true,
            'hanneskod\\readmetester\\Attributes\\IgnoreOutput' => true,
            'hanneskod\\readmetester\\Attributes\\IgnoreUnmarkedExamples' => true,
            'hanneskod\\readmetester\\Attributes\\Import' => true,
            'hanneskod\\readmetester\\Attributes\\Isolate' => true,
            'hanneskod\\readmetester\\Attributes\\Name' => true,
            'hanneskod\\readmetester\\Attributes\\NamespaceName' => true,
            'hanneskod\\readmetester\\Attributes\\PrependCode' => true,
            'hanneskod\\readmetester\\Attributes\\StartInHtmlMode' => true,
            'hanneskod\\readmetester\\Compiler\\CodeBlockImportingPass' => true,
            'hanneskod\\readmetester\\Compiler\\CompilerFactoryFactory' => true,
            'hanneskod\\readmetester\\Compiler\\CompilerFactoryInterface' => true,
            'hanneskod\\readmetester\\Compiler\\FileInput' => true,
            'hanneskod\\readmetester\\Compiler\\MultipassCompiler' => true,
            'hanneskod\\readmetester\\Compiler\\StdinInput' => true,
            'hanneskod\\readmetester\\Compiler\\TransformationPass' => true,
            'hanneskod\\readmetester\\Compiler\\UniqueNamePass' => true,
            'hanneskod\\readmetester\\Config\\ArrayRepository' => true,
            'hanneskod\\readmetester\\Config\\ConfigManager' => true,
            'hanneskod\\readmetester\\Config\\DefaultConfigFactory' => true,
            'hanneskod\\readmetester\\Config\\RepositoryInterface' => true,
            'hanneskod\\readmetester\\Config\\YamlFileLoader' => true,
            'hanneskod\\readmetester\\Console\\CliConsole' => true,
            'hanneskod\\readmetester\\Console\\FilesystemInputGenerator' => true,
            'hanneskod\\readmetester\\Event\\BootstrapIncluded' => true,
            'hanneskod\\readmetester\\Event\\DebugEvent' => true,
            'hanneskod\\readmetester\\Event\\ExampleEntered' => true,
            'hanneskod\\readmetester\\Event\\ExampleExited' => true,
            'hanneskod\\readmetester\\Event\\ExampleIgnored' => true,
            'hanneskod\\readmetester\\Event\\ExampleSkipped' => true,
            'hanneskod\\readmetester\\Event\\ExecutionStarted' => true,
            'hanneskod\\readmetester\\Event\\ExecutionStopped' => true,
            'hanneskod\\readmetester\\Event\\FileIncluded' => true,
            'hanneskod\\readmetester\\Event\\Listener\\DebugOutputtingSubscriber' => true,
            'hanneskod\\readmetester\\Event\\Listener\\DefaultOutputtingSubscriber' => true,
            'hanneskod\\readmetester\\Event\\Listener\\ExitStatusListener' => true,
            'hanneskod\\readmetester\\Event\\Listener\\JsonOutputtingSubscriber' => true,
            'hanneskod\\readmetester\\Event\\Listener\\SubscriberFactory' => true,
            'hanneskod\\readmetester\\Event\\Listener\\VoidOutputtingSubscriber' => true,
            'hanneskod\\readmetester\\Event\\LogEvent' => true,
            'hanneskod\\readmetester\\Event\\TestFailed' => true,
            'hanneskod\\readmetester\\Event\\TestPassed' => true,
            'hanneskod\\readmetester\\Event\\TestingAborted' => true,
            'hanneskod\\readmetester\\ExampleTester' => true,
            'hanneskod\\readmetester\\Example\\ArrayExampleStore' => true,
            'hanneskod\\readmetester\\Example\\CombinedExampleStore' => true,
            'hanneskod\\readmetester\\Example\\ExampleObj' => true,
            'hanneskod\\readmetester\\Example\\ExampleRegistry' => true,
            'hanneskod\\readmetester\\Expectation\\ErrorExpectation' => true,
            'hanneskod\\readmetester\\Expectation\\ExpectationEvaluator' => true,
            'hanneskod\\readmetester\\Expectation\\Failure' => true,
            'hanneskod\\readmetester\\Expectation\\OutputExpectation' => true,
            'hanneskod\\readmetester\\Expectation\\Success' => true,
            'hanneskod\\readmetester\\Markdown\\Compiler' => true,
            'hanneskod\\readmetester\\Markdown\\CompilerFactory' => true,
            'hanneskod\\readmetester\\Markdown\\Definition' => true,
            'hanneskod\\readmetester\\Markdown\\Parser' => true,
            'hanneskod\\readmetester\\Markdown\\Template' => true,
            'hanneskod\\readmetester\\Markdown\\TemplateRenderer' => true,
            'hanneskod\\readmetester\\Runner\\BootstrapFactory' => true,
            'hanneskod\\readmetester\\Runner\\ErrorOutcome' => true,
            'hanneskod\\readmetester\\Runner\\EvalRunner' => true,
            'hanneskod\\readmetester\\Runner\\OutputOutcome' => true,
            'hanneskod\\readmetester\\Runner\\ProcessRunner' => true,
            'hanneskod\\readmetester\\Runner\\RunnerFactory' => true,
            'hanneskod\\readmetester\\Runner\\SkippedOutcome' => true,
            'hanneskod\\readmetester\\Runner\\VoidOutcome' => true,
            'hanneskod\\readmetester\\Utils\\CodeBlock' => true,
            'hanneskod\\readmetester\\Utils\\Loader' => true,
            'hanneskod\\readmetester\\Utils\\NameObj' => true,
            'hanneskod\\readmetester\\Utils\\Regexp' => true,
        ];
    }

    /**
     * Gets the public 'application' shared autowired service.
     *
     * @return \Symfony\Component\Console\SingleCommandApplication
     */
    protected function getApplicationService()
    {
        $this->services['application'] = $instance = new \Symfony\Component\Console\SingleCommandApplication();

        $a = new \hanneskod\readmetester\Config\ConfigManager((new \hanneskod\readmetester\Config\DefaultConfigFactory('readme-tester.yaml.dist'))->createRepository());
        (new \hanneskod\readmetester\Config\YamlFileLoader('readme-tester.yaml'))->loadYamlFile($a);
        $b = new \hanneskod\readmetester\ExampleTester(new \hanneskod\readmetester\Expectation\ExpectationEvaluator());

        $c = new \Fig\EventDispatcher\AggregateProvider();

        $d = new \Crell\Tukio\OrderedListenerProvider($this);

        $e = new \hanneskod\readmetester\Event\Listener\ExitStatusListener();

        $d->addListener($e);

        $c->addProvider($d);

        $f = new \Crell\Tukio\Dispatcher($c);

        $b->setEventDispatcher($f);
        $g = new \hanneskod\readmetester\Console\FilesystemInputGenerator();
        $g->setEventDispatcher($f);
        $h = new \hanneskod\readmetester\Runner\BootstrapFactory();
        $h->setEventDispatcher($f);

        $i = new \hanneskod\readmetester\Console\CliConsole($a, $b, new \hanneskod\readmetester\Compiler\CompilerFactoryFactory(), $e, new \hanneskod\readmetester\Event\Listener\SubscriberFactory(), $g, new \hanneskod\readmetester\Runner\RunnerFactory(), $h, $d);
        $i->setEventDispatcher($f);

        $instance->setName('Readme-Tester');
        $instance->setVersion('dev');
        $instance->setCode($i);
        $i->configure($instance);

        return $instance;
    }

    public function getParameter(string $name)
    {
        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
    }

    protected function getDefaultParameters(): array
    {
        return [
            'DEFAULT_CONFIG_FILE' => 'readme-tester.yaml.dist',
            'USER_CONFIG_FILE' => 'readme-tester.yaml',
        ];
    }
}
