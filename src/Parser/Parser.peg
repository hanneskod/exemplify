//<?php

namespace hanneskod\readmetester\Parser;

grammar Parser
{
    start FILE = examples:(EXAMPLE / VOID_LINE)* .* {
        return array_values(array_filter($examples));
    };

    EXAMPLE = VISIBLE_EXAMPLE / HIDDEN_EXAMPLE;

    VISIBLE_EXAMPLE = annots:ANNOTATION_GROUP? EMPTY_LINE* code:CODE {
        return new Definition($code, ...(array)$annots);
    };

    HIDDEN_EXAMPLE = HTML_COMMENT_START EMPTY_LINE* annots:ANNOTATION* EMPTY_LINE* code:CODE EMPTY_LINE* HTML_COMMENT_END {
        return new Definition($code, ...(array)$annots);
    };

    ANNOTATION_GROUP = blocks:ANNOTATION_BLOCK+ {
        return call_user_func_array('array_merge', $blocks);
    };

    ANNOTATION_BLOCK = HTML_COMMENT_START annots:(ANNOTATION / EMPTY_LINE / VOID_LINE_IN_COMMENT)+ HTML_COMMENT_END {
        return array_filter($annots);
    };

    ANNOTATION = _ '@' name:STRING args:STRING* EOL? {
        return new Annotation($name, ...$args);
    };

    STRING = _ string:(RAW_STRING / QUOTED_STRING / EMPTY_STRING) _ {
        return $string;
    };

    EMPTY_STRING = '""' {
        return '';
    };

    QUOTED_STRING = '"' string:(ESCAPED_QUOTE / ' ' / RAW_STRING)* '"' {
        return implode($string);
    };

    ESCAPED_QUOTE = '\"' {
        return '"';
    };

    RAW_STRING = $((!(' ' / "\r" / "\n" / "\t" / COMMENT_END / COMMENT_END_COLD_FUSION / '"') .)+);

    CODE = CODE_START code:$((!CODE_END .)*) CODE_END {
        return new CodeBlock($code);
    };

    CODE_START = '```php'i EOL;

    CODE_END = '```' (EOL / EOF);

    VOID_LINE_IN_COMMENT = !HTML_COMMENT_END VOID_LINE {};

    VOID_LINE = (!EOL .)* EOL {};

    EMPTY_LINE = _ EOL {};

    HTML_COMMENT_START = _ '<!--' '-'? EOL?;

    HTML_COMMENT_END = _ (COMMENT_END / COMMENT_END_COLD_FUSION) EOL?;

    COMMENT_END "-->" = '-->';

    COMMENT_END_COLD_FUSION "--->" = '--->';

    EOL "END_OF_LINE" = _ "\r"? "\n";

    EOF "END_OF_FILE" = !.;

    _ = (" " / "\t")*;
}
