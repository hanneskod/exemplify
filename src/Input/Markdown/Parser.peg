//<?php

namespace hanneskod\readmetester\Input\Markdown;

use hanneskod\readmetester\Attributes\Name;
use hanneskod\readmetester\Input\AbstractPhpegParser;
use hanneskod\readmetester\Input\Definition;
use hanneskod\readmetester\Input\Template;

grammar Parser extends AbstractPhpegParser
{
    start FILE = global:GLOBAL_ATTRIBUTES_BLOCK? examples:EXAMPLE* .* {
        return new Template(array_values((array)$global), $examples);
    };

    GLOBAL_ATTRIBUTES_BLOCK = '<!--' _ attributes:(ATTRIBUTE / IGNORED_BLOCK_CONTENT)+ _ BLOCK_END {
        return array_filter($attributes);
    };

    IGNORED_BLOCK_CONTENT = (!(BLOCK_END / ATTRIBUTE_START / CODE_START) .)+ {
        return null;
    };

    BLOCK_END = '-->';

    EXAMPLE = attributes:ATTRIBUTES? code:CODE {
        return new Definition((array)$attributes, $code);
    };

    ATTRIBUTES = attributes:(HEADER / ATTRIBUTE / IGNORED_CONTENT)+ {
        return array_values(array_filter($attributes));
    };

    ATTRIBUTE = ATTRIBUTE_START _ attr:$((!ATTRIBUTE_END .)*) _ ATTRIBUTE_END {
        return $attr;
    };

    ATTRIBUTE_START = '#[';

    ATTRIBUTE_END = ']';

    HEADER = ATX_HEADER / SETEXT_HEADER;

    ATX_HEADER = !ATTRIBUTE_START '#'+ header:$((!('#' / EOL) .)+) '#'* EOL {
        return Name::createAttribute($header);
    };

    SETEXT_HEADER = header:$((!EOL .)+) EOL (('='+) / ('-'+)) EOL {
        return Name::createAttribute($header);
    };

    IGNORED_CONTENT = (!(ATTRIBUTE / CODE_START / HEADER) .)+ {
        return null;
    };

    CODE = CODE_START _ code:$((!CODE_END .)*) _ CODE_END {
        return $code;
    };

    CODE_START = '```php'i;

    CODE_END = '```';

    _ "SPACE" = (" " / "\t")* EOL?;

    EOL "END_OF_LINE" = "\r"? "\n";
}
